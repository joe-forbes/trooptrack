package WWW::SwaggerClient::Object::EventEntity;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use base "WWW::SwaggerClient::Object::BaseObject";

#
#
#
#NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
#

my $swagger_types = {
    'location' => 'string',
    'event_type' => 'string',
    'is_registration_closed?' => 'string',
    'color' => 'string',
    'payment_required_to_rsvp' => 'string',
    'activity_at' => 'string',
    'title' => 'string',
    'end_at' => 'string',
    'text_color' => 'string'
};

my $attribute_map = {
    'location' => 'location',
    'event_type' => 'event_type',
    'is_registration_closed?' => 'is_registration_closed?',
    'color' => 'color',
    'payment_required_to_rsvp' => 'payment_required_to_rsvp',
    'activity_at' => 'activity_at',
    'title' => 'title',
    'end_at' => 'end_at',
    'text_color' => 'text_color'
};

# new object
sub new { 
    my ($class, %args) = @_; 
    my $self = { 
        #Location of the event
        'location' => $args{'location'}, 
        #Type of the event (Campout, Hike, Meeting, etc)
        'event_type' => $args{'event_type'}, 
        #Indicates if registration for this event is closed.
        'is_registration_closed?' => $args{'is_registration_closed?'}, 
        #Color of the event, as specified by the creator
        'color' => $args{'color'}, 
        #Indicates if payment is required to RSVP for this event. You cannot RSVP through the API if this is true.
        'payment_required_to_rsvp' => $args{'payment_required_to_rsvp'}, 
        #Start time of the event in 2014-11-20T02:00:00.000-06:00 format
        'activity_at' => $args{'activity_at'}, 
        #Title of the event
        'title' => $args{'title'}, 
        #End time of the event in 2014-11-20T02:00:00.000-06:00 format
        'end_at' => $args{'end_at'}, 
        #Color for text that is visible on a background of the color of the event
        'text_color' => $args{'text_color'}
    }; 

    return bless $self, $class; 
}  

# get swagger type of the attribute
sub get_swagger_types {
    return $swagger_types;
}

# get attribute mappping
sub get_attribute_map {
    return $attribute_map;
}

1;
