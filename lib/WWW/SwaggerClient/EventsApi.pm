#
# Copyright 2015 SmartBear Software
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
#
package WWW::SwaggerClient::EventsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

sub new {
    my $class   = shift;
    my $default_api_client = $WWW::SwaggerClient::Configuration::api_client ? $WWW::SwaggerClient::Configuration::api_client  : WWW::SwaggerClient::ApiClient->new;
    my (%self) = (
        'api_client' => $default_api_client,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}

#
# g_et_version_events
#
# Returns a list of events for the date range provided
# 
# @param string $x_partner_token Your secret partner token (required)
# @param string $x_user_token The token you recieved when you authenticated the user (required)
# @param string $start_on an iso8601 date (YYYY-MM-DD) indicating the beginning of the date range to include events (required)
# @param string $end_on an iso8601 date (YYYY-MM-DD) indicating the end of the date range to include events (required)
# @return EventEntity
#
sub g_et_version_events {
    my ($self, %args) = @_;

    
    # verify the required parameter 'x_partner_token' is set
    unless (exists $args{'x_partner_token'}) {
      croak("Missing the required parameter 'x_partner_token' when calling g_et_version_events");
    }
    
    # verify the required parameter 'x_user_token' is set
    unless (exists $args{'x_user_token'}) {
      croak("Missing the required parameter 'x_user_token' when calling g_et_version_events");
    }
    
    # verify the required parameter 'start_on' is set
    unless (exists $args{'start_on'}) {
      croak("Missing the required parameter 'start_on' when calling g_et_version_events");
    }
    
    # verify the required parameter 'end_on' is set
    unless (exists $args{'end_on'}) {
      croak("Missing the required parameter 'end_on' when calling g_et_version_events");
    }
    

    # parse inputs
    my $_resource_path = '/v1/events';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/xml', 'application/json', 'application/octet-stream', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start_on'}) {
        $query_params->{'start_on'} = $self->{api_client}->to_query_value($args{'start_on'});
    }# query params
    if ( exists $args{'end_on'}) {
        $query_params->{'end_on'} = $self->{api_client}->to_query_value($args{'end_on'});
    }
    # header params
    if ( exists $args{'x_partner_token'}) {
        $header_params->{'X-Partner-Token'} = $self->{api_client}->to_header_value($args{'x_partner_token'});
    }# header params
    if ( exists $args{'x_user_token'}) {
        $header_params->{'X-User-Token'} = $self->{api_client}->to_header_value($args{'x_user_token'});
    }
    
    
    my $_body_data;
    

    # authentication setting, if any
    my $auth_settings = [];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EventEntity', $response);
    return $_response_object;
    
}
#
# p_ost_version_events
#
# Create an event
# 
# @param string $x_partner_token Your secret partner token (required)
# @param string $x_user_token The token you recieved when you authenticated the user (required)
# @param string $event[title]  (optional)
# @param string $event[event_type_id] ID of an event type returned by the events/available_types API (optional)
# @param string $event[start_at] Format: YYYY-MM-DDTHH:MM-0600 i.e. 2015-07-04T13:00-0600 (optional)
# @param string $event[end_at] Format: YYYY-MM-DDTHH:MM-0600 i.e. 2015-07-04T13:00-0600 (optional)
# @param string $event[location]  (optional)
# @param string $event[description]  (optional)
# @param string $event[inviteable_tokens] An array of strings describing who to invite. Each token must include the class and ID of the Troop, Patrol, or User to invite.\n              For example, to invite the whole troop, you would provide [&#39;Troop-1211&#39;], or to invite patrol 11911 and user 1223 and user 3344 then you would\n              provide [&#39;Patrol-11911&#39;, &#39;User-1223&#39;, &#39;User-3344&#39;] (optional)
# @param string $event[camping_nights] How many nights do you expect to camp? (optional)
# @param string $event[hiking_miles] Expected number of miles to be hiked (optional)
# @param string $event[canoeing_miles] Expected number of miles to be traveled by canoe (optional)
# @param string $event[dues] Fee for youth to attend (optional)
# @param string $event[adult_fee] Fee for adults to attend (optional)
# @param string $event[rsvp_deadline]  (optional)
# @param string $event[send_invites_when] Number of days before the event to send an invitation. Use 999 to indicate sending the invite immediately. (optional)
# @param string $event[send_reminder_when] Number of days before the event to send a reminder. (optional)
# @param string $event[service_hours] Number of service hours expected to be completed (optional)
# @return EventDetailsEntity
#
sub p_ost_version_events {
    my ($self, %args) = @_;

    
    # verify the required parameter 'x_partner_token' is set
    unless (exists $args{'x_partner_token'}) {
      croak("Missing the required parameter 'x_partner_token' when calling p_ost_version_events");
    }
    
    # verify the required parameter 'x_user_token' is set
    unless (exists $args{'x_user_token'}) {
      croak("Missing the required parameter 'x_user_token' when calling p_ost_version_events");
    }
    

    # parse inputs
    my $_resource_path = '/v1/events';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/xml', 'application/json', 'application/octet-stream', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    
    # header params
    if ( exists $args{'x_partner_token'}) {
        $header_params->{'X-Partner-Token'} = $self->{api_client}->to_header_value($args{'x_partner_token'});
    }# header params
    if ( exists $args{'x_user_token'}) {
        $header_params->{'X-User-Token'} = $self->{api_client}->to_header_value($args{'x_user_token'});
    }
    
    # form params
    if ( exists $args{'event[title]'} ) {
        
        $form_params->{'event[title]'} = $self->{api_client}->to_form_value($args{'event[title]'});
        
    }# form params
    if ( exists $args{'event[event_type_id]'} ) {
        
        $form_params->{'event[event_type_id]'} = $self->{api_client}->to_form_value($args{'event[event_type_id]'});
        
    }# form params
    if ( exists $args{'event[start_at]'} ) {
        
        $form_params->{'event[start_at]'} = $self->{api_client}->to_form_value($args{'event[start_at]'});
        
    }# form params
    if ( exists $args{'event[end_at]'} ) {
        
        $form_params->{'event[end_at]'} = $self->{api_client}->to_form_value($args{'event[end_at]'});
        
    }# form params
    if ( exists $args{'event[location]'} ) {
        
        $form_params->{'event[location]'} = $self->{api_client}->to_form_value($args{'event[location]'});
        
    }# form params
    if ( exists $args{'event[description]'} ) {
        
        $form_params->{'event[description]'} = $self->{api_client}->to_form_value($args{'event[description]'});
        
    }# form params
    if ( exists $args{'event[inviteable_tokens]'} ) {
        
        $form_params->{'event[inviteable_tokens]'} = $self->{api_client}->to_form_value($args{'event[inviteable_tokens]'});
        
    }# form params
    if ( exists $args{'event[camping_nights]'} ) {
        
        $form_params->{'event[camping_nights]'} = $self->{api_client}->to_form_value($args{'event[camping_nights]'});
        
    }# form params
    if ( exists $args{'event[hiking_miles]'} ) {
        
        $form_params->{'event[hiking_miles]'} = $self->{api_client}->to_form_value($args{'event[hiking_miles]'});
        
    }# form params
    if ( exists $args{'event[canoeing_miles]'} ) {
        
        $form_params->{'event[canoeing_miles]'} = $self->{api_client}->to_form_value($args{'event[canoeing_miles]'});
        
    }# form params
    if ( exists $args{'event[dues]'} ) {
        
        $form_params->{'event[dues]'} = $self->{api_client}->to_form_value($args{'event[dues]'});
        
    }# form params
    if ( exists $args{'event[adult_fee]'} ) {
        
        $form_params->{'event[adult_fee]'} = $self->{api_client}->to_form_value($args{'event[adult_fee]'});
        
    }# form params
    if ( exists $args{'event[rsvp_deadline]'} ) {
        
        $form_params->{'event[rsvp_deadline]'} = $self->{api_client}->to_form_value($args{'event[rsvp_deadline]'});
        
    }# form params
    if ( exists $args{'event[send_invites_when]'} ) {
        
        $form_params->{'event[send_invites_when]'} = $self->{api_client}->to_form_value($args{'event[send_invites_when]'});
        
    }# form params
    if ( exists $args{'event[send_reminder_when]'} ) {
        
        $form_params->{'event[send_reminder_when]'} = $self->{api_client}->to_form_value($args{'event[send_reminder_when]'});
        
    }# form params
    if ( exists $args{'event[service_hours]'} ) {
        
        $form_params->{'event[service_hours]'} = $self->{api_client}->to_form_value($args{'event[service_hours]'});
        
    }
    my $_body_data;
    

    # authentication setting, if any
    my $auth_settings = [];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EventDetailsEntity', $response);
    return $_response_object;
    
}
#
# g_et_version_events_types
#
# Returns event types available for a troop
# 
# @param string $x_partner_token Your secret partner token (required)
# @param string $x_user_token The token you recieved when you authenticated the user (required)
# @return EventTypeEntity
#
sub g_et_version_events_types {
    my ($self, %args) = @_;

    
    # verify the required parameter 'x_partner_token' is set
    unless (exists $args{'x_partner_token'}) {
      croak("Missing the required parameter 'x_partner_token' when calling g_et_version_events_types");
    }
    
    # verify the required parameter 'x_user_token' is set
    unless (exists $args{'x_user_token'}) {
      croak("Missing the required parameter 'x_user_token' when calling g_et_version_events_types");
    }
    

    # parse inputs
    my $_resource_path = '/v1/events/types';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/xml', 'application/json', 'application/octet-stream', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    
    # header params
    if ( exists $args{'x_partner_token'}) {
        $header_params->{'X-Partner-Token'} = $self->{api_client}->to_header_value($args{'x_partner_token'});
    }# header params
    if ( exists $args{'x_user_token'}) {
        $header_params->{'X-User-Token'} = $self->{api_client}->to_header_value($args{'x_user_token'});
    }
    
    
    my $_body_data;
    

    # authentication setting, if any
    my $auth_settings = [];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EventTypeEntity', $response);
    return $_response_object;
    
}
#
# p_ost_version_events_event_id_attendance
#
# Record attendance at an event
# 
# @param string $x_partner_token Your secret partner token (required)
# @param string $x_user_token The token you recieved when you authenticated the user (required)
# @param string $event_id  (required)
# @param int $event_trackers[user_id] ID of the user for whom you are RSVP&#39;ing. Must be within your scope as a user AND must be invited to the event. (required)
# @param string $event_trackers[attendance_status_cd] 0: Did not attend. 1: Attended. 2: No clue. (required)
# @param int $event_trackers[number_of_adult_guests] How many adult guests will this person bring? (optional)
# @param int $event_trackers[number_of_youth_guests] How many youth guests will this person bring? (optional)
# @return EventDetailsEntity
#
sub p_ost_version_events_event_id_attendance {
    my ($self, %args) = @_;

    
    # verify the required parameter 'x_partner_token' is set
    unless (exists $args{'x_partner_token'}) {
      croak("Missing the required parameter 'x_partner_token' when calling p_ost_version_events_event_id_attendance");
    }
    
    # verify the required parameter 'x_user_token' is set
    unless (exists $args{'x_user_token'}) {
      croak("Missing the required parameter 'x_user_token' when calling p_ost_version_events_event_id_attendance");
    }
    
    # verify the required parameter 'event_id' is set
    unless (exists $args{'event_id'}) {
      croak("Missing the required parameter 'event_id' when calling p_ost_version_events_event_id_attendance");
    }
    
    # verify the required parameter 'event_trackers[user_id]' is set
    unless (exists $args{'event_trackers[user_id]'}) {
      croak("Missing the required parameter 'event_trackers[user_id]' when calling p_ost_version_events_event_id_attendance");
    }
    
    # verify the required parameter 'event_trackers[attendance_status_cd]' is set
    unless (exists $args{'event_trackers[attendance_status_cd]'}) {
      croak("Missing the required parameter 'event_trackers[attendance_status_cd]' when calling p_ost_version_events_event_id_attendance");
    }
    

    # parse inputs
    my $_resource_path = '/v1/events/{event_id}/attendance';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/xml', 'application/json', 'application/octet-stream', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    
    # header params
    if ( exists $args{'x_partner_token'}) {
        $header_params->{'X-Partner-Token'} = $self->{api_client}->to_header_value($args{'x_partner_token'});
    }# header params
    if ( exists $args{'x_user_token'}) {
        $header_params->{'X-User-Token'} = $self->{api_client}->to_header_value($args{'x_user_token'});
    }
    # path params
    if ( exists $args{'event_id'}) {
        my $_base_variable = "{" . "event_id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'event_id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }
    # form params
    if ( exists $args{'event_trackers[user_id]'} ) {
        
        $form_params->{'event_trackers[user_id]'} = $self->{api_client}->to_form_value($args{'event_trackers[user_id]'});
        
    }# form params
    if ( exists $args{'event_trackers[attendance_status_cd]'} ) {
        
        $form_params->{'event_trackers[attendance_status_cd]'} = $self->{api_client}->to_form_value($args{'event_trackers[attendance_status_cd]'});
        
    }# form params
    if ( exists $args{'event_trackers[number_of_adult_guests]'} ) {
        
        $form_params->{'event_trackers[number_of_adult_guests]'} = $self->{api_client}->to_form_value($args{'event_trackers[number_of_adult_guests]'});
        
    }# form params
    if ( exists $args{'event_trackers[number_of_youth_guests]'} ) {
        
        $form_params->{'event_trackers[number_of_youth_guests]'} = $self->{api_client}->to_form_value($args{'event_trackers[number_of_youth_guests]'});
        
    }
    my $_body_data;
    

    # authentication setting, if any
    my $auth_settings = [];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EventDetailsEntity', $response);
    return $_response_object;
    
}
#
# g_et_version_events_id
#
# Returns detailed information about an event
# 
# @param string $x_partner_token Your secret partner token (required)
# @param string $x_user_token The token you recieved when you authenticated the user (required)
# @param string $id  (required)
# @return EventDetailsEntity
#
sub g_et_version_events_id {
    my ($self, %args) = @_;

    
    # verify the required parameter 'x_partner_token' is set
    unless (exists $args{'x_partner_token'}) {
      croak("Missing the required parameter 'x_partner_token' when calling g_et_version_events_id");
    }
    
    # verify the required parameter 'x_user_token' is set
    unless (exists $args{'x_user_token'}) {
      croak("Missing the required parameter 'x_user_token' when calling g_et_version_events_id");
    }
    
    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling g_et_version_events_id");
    }
    

    # parse inputs
    my $_resource_path = '/v1/events/{id}';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/xml', 'application/json', 'application/octet-stream', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    
    # header params
    if ( exists $args{'x_partner_token'}) {
        $header_params->{'X-Partner-Token'} = $self->{api_client}->to_header_value($args{'x_partner_token'});
    }# header params
    if ( exists $args{'x_user_token'}) {
        $header_params->{'X-User-Token'} = $self->{api_client}->to_header_value($args{'x_user_token'});
    }
    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }
    
    my $_body_data;
    

    # authentication setting, if any
    my $auth_settings = [];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EventDetailsEntity', $response);
    return $_response_object;
    
}
#
# p_ut_version_events_id_rsvp
#
# RSVP to an event
# 
# @param string $x_partner_token Your secret partner token (required)
# @param string $x_user_token The token you recieved when you authenticated the user (required)
# @param string $id  (required)
# @param int $user_id ID of the user for whom you are RSVP&#39;ing. Must be within your scope as a user AND must be invited to the event. (required)
# @param string $status_cd yes: Coming. no: Not coming. tbd: No clue. (required)
# @param int $number_of_youth_guests  (optional)
# @param int $number_of_adult_guests  (optional)
# @return EventDetailsEntity
#
sub p_ut_version_events_id_rsvp {
    my ($self, %args) = @_;

    
    # verify the required parameter 'x_partner_token' is set
    unless (exists $args{'x_partner_token'}) {
      croak("Missing the required parameter 'x_partner_token' when calling p_ut_version_events_id_rsvp");
    }
    
    # verify the required parameter 'x_user_token' is set
    unless (exists $args{'x_user_token'}) {
      croak("Missing the required parameter 'x_user_token' when calling p_ut_version_events_id_rsvp");
    }
    
    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling p_ut_version_events_id_rsvp");
    }
    
    # verify the required parameter 'user_id' is set
    unless (exists $args{'user_id'}) {
      croak("Missing the required parameter 'user_id' when calling p_ut_version_events_id_rsvp");
    }
    
    # verify the required parameter 'status_cd' is set
    unless (exists $args{'status_cd'}) {
      croak("Missing the required parameter 'status_cd' when calling p_ut_version_events_id_rsvp");
    }
    

    # parse inputs
    my $_resource_path = '/v1/events/{id}/rsvp';
    $_resource_path =~ s/{format}/json/; # default format to json

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/xml', 'application/json', 'application/octet-stream', 'text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    
    # header params
    if ( exists $args{'x_partner_token'}) {
        $header_params->{'X-Partner-Token'} = $self->{api_client}->to_header_value($args{'x_partner_token'});
    }# header params
    if ( exists $args{'x_user_token'}) {
        $header_params->{'X-User-Token'} = $self->{api_client}->to_header_value($args{'x_user_token'});
    }
    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }
    # form params
    if ( exists $args{'user_id'} ) {
        
        $form_params->{'user_id'} = $self->{api_client}->to_form_value($args{'user_id'});
        
    }# form params
    if ( exists $args{'status_cd'} ) {
        
        $form_params->{'status_cd'} = $self->{api_client}->to_form_value($args{'status_cd'});
        
    }# form params
    if ( exists $args{'number_of_youth_guests'} ) {
        
        $form_params->{'number_of_youth_guests'} = $self->{api_client}->to_form_value($args{'number_of_youth_guests'});
        
    }# form params
    if ( exists $args{'number_of_adult_guests'} ) {
        
        $form_params->{'number_of_adult_guests'} = $self->{api_client}->to_form_value($args{'number_of_adult_guests'});
        
    }
    my $_body_data;
    

    # authentication setting, if any
    my $auth_settings = [];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('EventDetailsEntity', $response);
    return $_response_object;
    
}


1;
